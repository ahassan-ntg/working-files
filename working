select prc_u_currenthelper_id from prc_u_currenthelper;do $$declare   prc_u_currenthelper_ids numeric[];beginselect prc_u_currenthelper_id into prc_u_currenthelper_ids from prc_u_currenthelper;alter table prc_u_currenthelper add constraint chkcnstr1 CHECK (formlist5600 in prc_u_currenthelper_ids and is_row_deleted is null or is_row_deleted = false);end; $$CREATE FUNCTION get_ids2()RETURNS bigint[]AS $$BEGINRETURN (select prc_u_currenthelper_id from prc_u_currenthelper)END; $$LANGUAGE plpgsql;CREATE UNIQUE INDEX IF NOT EXISTS ntg_prc_unq    ON public.prc_u_datetrial USING btree    ((CASE    WHEN is_row_deleted = false OR is_row_deleted IS NULL THEN txt1    ELSE NULL::character varyingEND) COLLATE pg_catalog."default" ASC NULLS LAST, (CASE    WHEN is_row_deleted = false OR is_row_deleted IS NULL THEN txt2    ELSE NULL::character varyingEND) COLLATE pg_catalog."default" ASC NULLS LAST)    TABLESPACE pg_default;gavin sempelselect * from adm_types_charts_uda where uda_id = 1977 or recid = (select max(recid) from adm_types_charts_uda)select * from adm_types_charts_uda where recid = 1059 or recid = -1http://localhost:3000/rest/integrationRepo/Operations/1085select recid,caption_fields,column_caption_list,columns_size,columns_visibility,is_image_column, is_numeric_column, is_boolean_columns,is_date_column, date_columns_options,* from adm_types_charts_uda where recid = 1059-- or recid = -1select * from sa_group where name = 'Company' and company_name = 'NTG'select * from sa_group where name = 'Organization' and company_name = 'NTG' and parent_group_id = 1select * from sa_group where name = 'Admin Group' and company_name = 'NTG' and parent_group_id = 2select u.* from comp_employee u left join sa_user_group ug on u.recid = ug.useridwhere u.name = 'alaa hassan' and ug.groupid = 3 and u.company_name = 'NTG'select uda_table_name, * from adm_types_uda_info where uda_type = 24select uda_table_name, * from adm_types_uda_info where object_id = 1221select * from adm_objects where recid = 1221select * from adm_apps where app_identifier = 'MOD'select * from ds3_mp_googlemap-----if(Utils.isNotEmpty(uda.getUdaTableName()) && uda.getUdaTableName().toLowerCase().contains("_mp_"))                                value.setRowData(getGoogleMapValues(id, uda));                            else if (row != null && !row.isEmpty()) {                                Object v = row.get(0).get(value.getUdaName().replaceAll("[^\\w]", "_"));                                value.setUdaValue((v == null) ? null : v.toString());                            }                            ------------------                            search_workorder ({{uda.newworkorder}},{{uda.newsiteid}},{{uda.executer_new_val}},{{LogineUserInfoData.loginUserName}},{{uda.userrole}})search_workorder ('WO_20','p12121','hothman','MopApp','COORDINATOR')-- search_workorder ({{uda.newworkorder}},{{uda.newsiteid}},{{uda.executer_new_val}},{{LogineUserInfoData.loginUserName}},{{uda.userrole}})select h.NTACCOUNT, h.SCHEDULED_START_DATE, h.SCHEDULED_END_DATE, h.ROLE, h.ACTIVITY_STATUS,              h.WORK_ORDER_ID, h.ACTIVITY_TYPE , h.TEMPLATENAME, h.ASSET_ID , ''' || username ||'''              from NTG_ACTIVITY_HEADER h, NTG_ACTIVITY_DETAILS_ALL d              where h.WORK_ORDER_ID = d.WORK_ORDER_IDcreate or replace PROCEDURE            search_workorder (workorder_id IN varchar2 , site_id  IN varchar2 , executer_name IN varchar2 , username IN varchar2 ,  role IN varchar2) IStemp_sql varchar2(500)  ;wo varchar2(1);st varchar2(1);ex varchar2(1);BEGINtemp_sql := null;wo := '0';st := '0';ex := '0';temp_sql := ' insert into NTG_ACTIVITY_HEADER_temp select h.NTACCOUNT, h.SCHEDULED_START_DATE, h.SCHEDULED_END_DATE, h.ROLE, h.ACTIVITY_STATUS,              h.WORK_ORDER_ID, h.ACTIVITY_TYPE , h.TEMPLATENAME, h.ASSET_ID , ''' || username ||'''              from NTG_ACTIVITY_HEADER h, NTG_ACTIVITY_DETAILS_ALL d              where h.WORK_ORDER_ID = d.WORK_ORDER_ID ' ;IF workorder_id is not null THENtemp_sql := temp_sql || ' and h.WORK_ORDER_ID = '''|| workorder_id || '''' ;wo := '1';END IF ;IF site_id is not null and wo = '1' THENtemp_sql := temp_sql || ' and h.ASSET_ID = ''' || site_id || '''';st := '1';ELSIF  site_id is not null and wo = '0' THENtemp_sql := temp_sql || ' and h.ASSET_ID = ''' || site_id || '''';st := '1';END IF ;IF executer_name is not null and (wo = '1' or st = '1') THENtemp_sql := temp_sql || ' and h.NTACCOUNT = ''' || executer_name || '''' ;ex := '1';ELSIF  executer_name is not null and wo = '0' and st = '0' THENtemp_sql := temp_sql || ' and h.NTACCOUNT = ''' || executer_name || '''' ;ex := '1';END IF ;IF role = 'Executer' THENtemp_sql := temp_sql || ' and h.NTACCOUNT = ''' || username || '''' ;END IF ;IF role = 'COORDINATOR' THENtemp_sql := temp_sql || ' and d.TL_NTACCOUNT = ''' || username || '''' ;END IF ;   EXECUTE IMMEDIATE temp_sql  ;   --insert into test_job values (1, temp_sql);   commit;END search_workorder;select h.NTACCOUNT,d.tl_ntaccount, h.SCHEDULED_START_DATE, h.SCHEDULED_END_DATE, h.ROLE, h.ACTIVITY_STATUS,              h.WORK_ORDER_ID, h.ACTIVITY_TYPE , h.TEMPLATENAME, h.ASSET_ID              from NTG_ACTIVITY_HEADER h, NTG_ACTIVITY_DETAILS_ALL d              where h.WORK_ORDER_ID = d.WORK_ORDER_ID              and h.WORK_ORDER_ID  = 'WO_20'              and h.asset_id = 'p12121'              and h.NTACCOUNT = 'hothman'               and d.TL_NTACCOUNT = 'MobApp';-- search_workorder ('WO_20','p12121','hothman','MopApp','COORDINATOR')set serverOutput ondeclaretmp nchar(632):='';beginSELECT LISTAGG (COLUMN_NAME, ', ')  as hi into tmpFROM USER_TAB_COLS WHERE lower(TABLE_NAME) = 'comp_employee';dbms_output.put_line(tmp);--WITH MANAGEREMPLOYEES (DEPARTMENT, LOGIN_PROFILE_ID, POSITION, RECID, COMPANY_NAME, CREATED_DATE, LAST_MODIFIED_DATE, CORPORATE_ID, CONTRACT_TYPEID, DEPTID, EMAIL, EXPIREDATE, HOURCOST, MOBILE_PHONE, NAME, FIRST_NAME, LAST_NAME, PARENT_ID, PASSWORD, PREFERED_LANGUAGE, SKILLS, SMALLIMAGE, STATUSID, USER_NAME, WORKINGDAYS, ACC_TEMP_LOCKED_START_TIME, FAILED_LOGIN_COUNTER, GENDER, IMAGE, IS_SUPER_ADMIN, LAST_LOGIN, LOCATION_NAME, LOGIN_TYPE, NUM_OF_OTPS_SENT, OTP, OTP_VALID_UNTIL, RESET_OTP_AT, IS_2FA_CODE, IS_2FA_ENABLED, IS_EXPIRE_CODE_NUMBER, IS_EXPIRE_TIME, STARTWORKINGHOUR, STATUS_NAME, SVG_FLAG, TEMPORARY_LOCKS_COUNTER, USER_TYPE, WORKINGHOURS) AS            (SELECT            C.DEPARTMENT, C.LOGIN_PROFILE_ID, C.POSITION, C.RECID, C.COMPANY_NAME, C.CREATED_DATE, C.LAST_MODIFIED_DATE, C.CORPORATE_ID, C.CONTRACT_TYPEID, C.DEPTID, C.EMAIL, C.EXPIREDATE, C.HOURCOST, C.MOBILE_PHONE, C.NAME, C.FIRST_NAME, C.LAST_NAME, C.PARENT_ID, C.PASSWORD, C.PREFERED_LANGUAGE, C.SKILLS, C.SMALLIMAGE, C.STATUSID, C.USER_NAME, C.WORKINGDAYS, C.ACC_TEMP_LOCKED_START_TIME, C.FAILED_LOGIN_COUNTER, C.GENDER, C.IMAGE, C.IS_SUPER_ADMIN, C.LAST_LOGIN, C.LOCATION_NAME, C.LOGIN_TYPE, C.NUM_OF_OTPS_SENT, C.OTP, C.OTP_VALID_UNTIL, C.RESET_OTP_AT, C.IS_2FA_CODE, C.IS_2FA_ENABLED, C.IS_EXPIRE_CODE_NUMBER, C.IS_EXPIRE_TIME, C.STARTWORKINGHOUR, C.STATUS_NAME, C.SVG_FLAG, C.TEMPORARY_LOCKS_COUNTER, C.USER_TYPE, C.WORKINGHOURS            FROM COMP_EMPLOYEE C            WHERE C.RECID = 1 AND c.COMPANY_NAME = 'NTG'            UNION ALL SELECT            T.DEPARTMENT, T.LOGIN_PROFILE_ID, T.POSITION, T.RECID, T.COMPANY_NAME, T.CREATED_DATE, T.LAST_MODIFIED_DATE, T.CORPORATE_ID, T.CONTRACT_TYPEID, T.DEPTID, T.EMAIL, T.EXPIREDATE, T.HOURCOST, T.MOBILE_PHONE, T.NAME, T.FIRST_NAME, T.LAST_NAME, T.PARENT_ID, T.PASSWORD, T.PREFERED_LANGUAGE, T.SKILLS, T.SMALLIMAGE, T.STATUSID, T.USER_NAME, T.WORKINGDAYS, T.ACC_TEMP_LOCKED_START_TIME, T.FAILED_LOGIN_COUNTER, T.GENDER, T.IMAGE, T.IS_SUPER_ADMIN, T.LAST_LOGIN, T.LOCATION_NAME, T.LOGIN_TYPE, T.NUM_OF_OTPS_SENT, T.OTP, T.OTP_VALID_UNTIL, T.RESET_OTP_AT, T.IS_2FA_CODE, T.IS_2FA_ENABLED, T.IS_EXPIRE_CODE_NUMBER, T.IS_EXPIRE_TIME, T.STARTWORKINGHOUR, T.STATUS_NAME, T.SVG_FLAG, T.TEMPORARY_LOCKS_COUNTER, T.USER_TYPE, T.WORKINGHOURS            FROM COMP_EMPLOYEE T            JOIN MANAGEREMPLOYEES ME ON T.PARENT_ID = ME.RECID)            SELECT            M.DEPARTMENT, M.LOGIN_PROFILE_ID, M.POSITION, M.RECID, M.COMPANY_NAME, M.CREATED_DATE, M.LAST_MODIFIED_DATE, M.CORPORATE_ID, M.CONTRACT_TYPEID, M.DEPTID, M.EMAIL, M.EXPIREDATE, M.HOURCOST, M.MOBILE_PHONE, M.NAME, M.FIRST_NAME, M.LAST_NAME, M.PARENT_ID, M.PASSWORD, M.PREFERED_LANGUAGE, M.SKILLS, M.SMALLIMAGE, M.STATUSID, M.USER_NAME, M.WORKINGDAYS, M.ACC_TEMP_LOCKED_START_TIME, M.FAILED_LOGIN_COUNTER, M.GENDER, M.IMAGE, M.IS_SUPER_ADMIN, M.LAST_LOGIN, M.LOCATION_NAME, M.LOGIN_TYPE, M.NUM_OF_OTPS_SENT, M.OTP, M.OTP_VALID_UNTIL, M.RESET_OTP_AT, M.IS_2FA_CODE, M.IS_2FA_ENABLED, M.IS_EXPIRE_CODE_NUMBER, M.IS_EXPIRE_TIME, M.STARTWORKINGHOUR, M.STATUS_NAME, M.SVG_FLAG, M.TEMPORARY_LOCKS_COUNTER, M.USER_TYPE, M.WORKINGHOURS            FROM MANAGEREMPLOYEES M ORDER BY M.RECID;            WITH MANAGEREMPLOYEES (RECID,DEPARTMENT, LOGIN_PROFILE_ID, POSITION,  COMPANY_NAME, CREATED_DATE, LAST_MODIFIED_DATE, CORPORATE_ID, CONTRACT_TYPEID, DEPTID, EMAIL, EXPIREDATE, HOURCOST, MOBILE_PHONE, NAME, FIRST_NAME, LAST_NAME, PARENT_ID, PASSWORD, PREFERED_LANGUAGE, SKILLS, SMALLIMAGE, STATUSID, USER_NAME, WORKINGDAYS, ACC_TEMP_LOCKED_START_TIME, FAILED_LOGIN_COUNTER, GENDER, IMAGE, IS_SUPER_ADMIN, LAST_LOGIN, LOCATION_NAME, LOGIN_TYPE, NUM_OF_OTPS_SENT, OTP, OTP_VALID_UNTIL, RESET_OTP_AT, IS_2FA_CODE, IS_2FA_ENABLED, IS_EXPIRE_CODE_NUMBER, IS_EXPIRE_TIME, STARTWORKINGHOUR, STATUS_NAME, SVG_FLAG, TEMPORARY_LOCKS_COUNTER, USER_TYPE, WORKINGHOURS) AS            (SELECT C.RECID,            C.DEPARTMENT, C.LOGIN_PROFILE_ID, C.POSITION, C.COMPANY_NAME, C.CREATED_DATE, C.LAST_MODIFIED_DATE, C.CORPORATE_ID, C.CONTRACT_TYPEID, C.DEPTID, C.EMAIL, C.EXPIREDATE, C.HOURCOST, C.MOBILE_PHONE, C.NAME, C.FIRST_NAME, C.LAST_NAME, C.PARENT_ID, C.PASSWORD, C.PREFERED_LANGUAGE, C.SKILLS, C.SMALLIMAGE, C.STATUSID, C.USER_NAME, C.WORKINGDAYS, C.ACC_TEMP_LOCKED_START_TIME, C.FAILED_LOGIN_COUNTER, C.GENDER, C.IMAGE, C.IS_SUPER_ADMIN, C.LAST_LOGIN, C.LOCATION_NAME, C.LOGIN_TYPE, C.NUM_OF_OTPS_SENT, C.OTP, C.OTP_VALID_UNTIL, C.RESET_OTP_AT, C.IS_2FA_CODE, C.IS_2FA_ENABLED, C.IS_EXPIRE_CODE_NUMBER, C.IS_EXPIRE_TIME, C.STARTWORKINGHOUR, C.STATUS_NAME, C.SVG_FLAG, C.TEMPORARY_LOCKS_COUNTER, C.USER_TYPE, C.WORKINGHOURS            FROM COMP_EMPLOYEE C            WHERE C.RECID = 1 AND c.COMPANY_NAME = 'NTG'            UNION ALL SELECT            T.RECID, T.DEPARTMENT, T.LOGIN_PROFILE_ID, T.POSITION, T.COMPANY_NAME, T.CREATED_DATE, T.LAST_MODIFIED_DATE, T.CORPORATE_ID, T.CONTRACT_TYPEID, T.DEPTID, T.EMAIL, T.EXPIREDATE, T.HOURCOST, T.MOBILE_PHONE, T.NAME, T.FIRST_NAME, T.LAST_NAME, T.PARENT_ID, T.PASSWORD, T.PREFERED_LANGUAGE, T.SKILLS, T.SMALLIMAGE, T.STATUSID, T.USER_NAME, T.WORKINGDAYS, T.ACC_TEMP_LOCKED_START_TIME, T.FAILED_LOGIN_COUNTER, T.GENDER, T.IMAGE, T.IS_SUPER_ADMIN, T.LAST_LOGIN, T.LOCATION_NAME, T.LOGIN_TYPE, T.NUM_OF_OTPS_SENT, T.OTP, T.OTP_VALID_UNTIL, T.RESET_OTP_AT, T.IS_2FA_CODE, T.IS_2FA_ENABLED, T.IS_EXPIRE_CODE_NUMBER, T.IS_EXPIRE_TIME, T.STARTWORKINGHOUR, T.STATUS_NAME, T.SVG_FLAG, T.TEMPORARY_LOCKS_COUNTER, T.USER_TYPE, T.WORKINGHOURS            FROM COMP_EMPLOYEE T            JOIN MANAGEREMPLOYEES ME ON T.PARENT_ID = ME.RECID)            SELECT M.RECID,            M.DEPARTMENT, M.LOGIN_PROFILE_ID, M.POSITION,M.COMPANY_NAME, M.CREATED_DATE, M.LAST_MODIFIED_DATE, M.CORPORATE_ID, M.CONTRACT_TYPEID, M.DEPTID, M.EMAIL, M.EXPIREDATE, M.HOURCOST, M.MOBILE_PHONE, M.NAME, M.FIRST_NAME, M.LAST_NAME, M.PARENT_ID, M.PASSWORD, M.PREFERED_LANGUAGE, M.SKILLS, M.SMALLIMAGE, M.STATUSID, M.USER_NAME, M.WORKINGDAYS, M.ACC_TEMP_LOCKED_START_TIME, M.FAILED_LOGIN_COUNTER, M.GENDER, M.IMAGE, M.IS_SUPER_ADMIN, M.LAST_LOGIN, M.LOCATION_NAME, M.LOGIN_TYPE, M.NUM_OF_OTPS_SENT, M.OTP, M.OTP_VALID_UNTIL, M.RESET_OTP_AT, M.IS_2FA_CODE, M.IS_2FA_ENABLED, M.IS_EXPIRE_CODE_NUMBER, M.IS_EXPIRE_TIME, M.STARTWORKINGHOUR, M.STATUS_NAME, M.SVG_FLAG, M.TEMPORARY_LOCKS_COUNTER, M.USER_TYPE, M.WORKINGHOURS            FROM MANAGEREMPLOYEES M where m.recid <> 1 ORDER BY M.RECID;--end;update comp_employee set user_type = 0 where user_type is nullselect * from adm_types_uda_multi_value where name = '1159' and uda_id = 4628 and company_name = 'NTG'select * from adm_report where report_name = 'sla_s_1'select * from adm_types_uda_multi_value where uda_id =4628 and (is_deleted ='0' or is_deleted = null) and company_name = 'NTG'  order by DISPLAY_SEQUENCE ascselect * from adm_types_uda_properties where uda_id = 4628select * from adm_types_uda where uda_type = 11select atui.type_id,atup.* from adm_types_uda_info atui join adm_types_uda_properties atup on atui.recid = atup.uda_id where atui.uda_type = 11select * from adm_types_uda_propertiesselect repositories_info from adm_types_uda where uda_type = 11SELECT    (U.RECID) as UDA_ID,    TO_CLOB(  REPLACE(            CONCAT('{',                   (CASE WHEN U.REPOSITORIES_INFO IS NOT NULL THEN '"repositoriesInfo" :' || ((U.REPOSITORIES_INFO)) || ' ,' END) ||                   (CASE WHEN U.UDA_ICON_NAME IS NOT NULL THEN '"udaIconName" :' || '"' || U.UDA_ICON_NAME || '" ,' END) ||                   (CASE WHEN U.UDA_DESCRIPTION IS NOT NULL THEN '"udaDescription" :'|| '"' || U.UDA_DESCRIPTION || '" ,' END) ||                   (CASE WHEN U.QR_CODE IS NOT NULL THEN '"qrCode" :'|| U.QR_CODE || ',' END) ||                   (CASE WHEN U.E_SIGNATURE IS NOT NULL THEN '"eSignature" :'|| U.E_SIGNATURE || ' ,' END) ||                   (CASE WHEN U.LOCATION IS NOT NULL THEN '"location" :'||  U.LOCATION || ' ,' END) ||                   (CASE WHEN U.UDA_ORDER_IN_ROW IS NOT NULL THEN '"udaOrderInRow" :'|| U.UDA_ORDER_IN_ROW || ' ,' END) ||                   (CASE WHEN U.MOBILE_ITEM_HEIGHT IS NOT NULL THEN '"mobileItemHeight" :'|| U.MOBILE_ITEM_HEIGHT || ' ,' END) ||                   (CASE WHEN U.MOBILE_ROW_ORDER IS NOT NULL THEN '"mobileRowOrder" :'|| U.MOBILE_ROW_ORDER || ' ,' END) ||                   (CASE WHEN U.MOBILE_ROW_ID IS NOT NULL THEN '"mobileRowId" :'|| U.MOBILE_ROW_ID || ' ,' END) ||                   (CASE WHEN U.MOBILE_ITEM_WIDTH IS NOT NULL THEN '"mobileItemWidth" :' || '"' || U.MOBILE_ITEM_WIDTH || '" ,' END) ||                   '}')        ,',}','}')        )              AS uda_propertiesFROM ADM_TYPES_UDA Uwhere lower(u.uda_caption) like lower('SLA%') and U.UDA_TYPE = 23 ;SELECT pdb_name, status FROM cdb_pdbs;select * from all_users where lower(username) like '%back%';lower(manager_id) = lower('{{uda.user_id}}')////<ng-container *ngIf="input_typeOfInput == 'checkbox'" [pTooltip]="udaTooltip" tooltipPosition="top">    <div *ngIf="!horizontalView && !hideLabelName" [attr.id]="'SNCMB_' + input_id" class="{{IsRTL?'rtl':'noRtl'}}">        <label [for]="input_id" [style.font-size]="'12px'"               [style.color]="labelColor?labelColor:_baConfig.getSelectedThemeDefaultFontColor()"               [style.font-weight]="(isBold)?'bold':''"               [pTooltip]="udaTooltip|translate" tooltipPosition="top"        >{{label_name |translate:0 }}</label>    </div>    <p-toggleButton #ctrl                    (onChange)="EmitChange(ctrl,null)"                    [disabled]="IsMovable || readonly || IsDisabled"                    [id]="input_id"                    [name]="input_name"                    [ngModel]="getValue()"                    [required]="required"                    [style.background-color]="(input_typeOfInput == 'checkbox') ? '#ffffff': ''"                    [style.border-left]="'none'"                    [style.color]="IsDisabled ||readonly ? fontcolor :''"                    [style.cursor]="(IsMovable) ? 'move' : ''"                    [style.height]="height"                    onLabel="" offLabel=""                    class="global-checkbox {{IsRTL?'labelRtl':''}}"                    offIcon="pi pi-times" onIcon="pi pi-check"    ></p-toggleButton>    <label *ngIf="horizontalView && !hideLabelName" [for]="input_id" [style.font-size]="'12px'"           class="{{IsRTL?'labelRtl':''}}"           [style.color]="labelColor?labelColor:_baConfig.getSelectedThemeDefaultFontColor()"           [style.font-weight]="(isBold)?'bold':''" [style.margin-left]="IsRTL ? '' : '10px'"           [style.margin-right]="IsRTL ? '10px' : ''"           [style.margin-bottom]="'0px'"    >{{label_name |translate:0 }}</label></ng-container><span *ngIf="input_typeOfInput != 'checkbox' &&  input_typeOfInput != 'color'" [attr.id]="'SNCMB_' + input_id"      [class]="'form-group ' + (notFloatLable ? 'ui-float-label ' : '')+ (IsRTL?'rtl':'noRtl')"      [ngStyle]="(input_typeOfInput =='number'&& allowNeg==true)?{'margin-top': '-10.5%'}:{}"      [pTooltip]="udaTooltip|translate" tooltipPosition="top">    <div *ngIf="!horizontalView && input_typeOfInput != 'checkbox' && !hideLabelName">    <label *ngIf="input_typeOfInput != 'checkbox' && !hideLabelName" [for]="input_id"           [style.color]="labelColor?labelColor:_baConfig.getSelectedThemeDefaultFontColor()"           [style.font-weight]="(isBold)?'bold':''"           [pTooltip]="udaTooltip|translate" tooltipPosition="top"    >{{label_name |translate:0 }}</label>    </div>    <div [style]="(horizontalView) ? 'display:flex;margin-top:30px;' : ''">        <span style="width:85%">    <input #ctrl           (change)="EmitChange(ctrl,null)"           (keydown)="disableELetterforNumericType($event)"           (keypress)="keypress.emit($event)"           (keyup)="EmitOnKeyUp(ctrl.value)"           *ngIf="!IsTextArea && input_typeOfInput != 'date' &&   input_typeOfInput != 'time' && input_typeOfInput != 'dateTime'           && input_typeOfInput != 'password' && input_typeOfInput !='currency' && allowNeg==false "           [class]="'form-control col-sm-'+size"           [id]="input_id"           [max]="input_checkMaxValue"           [maxlength]="input_maxValue"           [min]="input_minValue"           [name]="input_name"           [ngModel]="getValue()"           [pattern]="regex"           [placeholder]="(inputPlaceHolder != null) ? (('general.Enter ' | translate) + ( (inputPlaceHolder && inputPlaceHolder != '')? (inputPlaceHolder| translate)  : label_name)  ):''"           [readonly]="IsMovable || readonly || IsDisabled"           [required]="required"           [step]="(AlowFraction)? 'any' :1"           [style.color]="IsDisabled ||readonly ? fontcolor :''" [style.cursor]="(IsMovable) ? 'move' : ''"           [style.opacity]="IsDisabled ||readonly ? '0.5' :''"           [style.height]="height"           [style.padding]="'0.375rem 0.75rem'"           [type]="input_typeOfInput"           autocomplete="off"           ngModel           pInputText    >    <input #ctrl           (change)="EmitChange(ctrl,null)"           (keydown)="disableELetterforNumericType($event)"           (keypress)="keypress.emit($event)"           (keyup)="EmitOnKeyUp(ctrl.value)"           *ngIf=" input_typeOfInput =='number'&& allowNeg==true"           [class]="'form-control col-sm-'+size"           [id]="input_id"           [name]="input_name"           [ngModel]="getValue() "           [pattern]="regex"           [placeholder]="(inputPlaceHolder != null) ? (('general.Enter ' | translate) + ( (inputPlaceHolder && inputPlaceHolder != '')? (inputPlaceHolder| translate)  : label_name) ):''"           [readonly]="IsMovable || readonly || IsDisabled"           [required]="required"           [step]="(AlowFraction)? 'any' :1"           [style.color]="IsDisabled ||readonly ? fontcolor :''"           [style.cursor]="(IsMovable) ? 'move' : ''"           [style.height]="height"           [style.padding]="'0.375rem 0.75rem'"           [type]="input_typeOfInput"           autocomplete="off"           pInputText    >    <p-calendar #ctrl                (keydown)="disableELetterforNumericType($event)"                (keyup)="EmitOnKeyUp(ctrl.value)"                (onClearClick)="EmitChange(ctrl,'')"                (onInput)="EmitChange(ctrl,$event)"                (onSelect)="EmitChange(ctrl,$event)"                *ngIf="input_typeOfInput == 'date' || input_typeOfInput == 'time' || input_typeOfInput == 'dateTime'"                [(ngModel)]="date"                [appendTo]="'body'"                [class]="'form-control col-sm-'+size"                [dateFormat]="(input_typeOfInput == 'date') ? 'yy-mm-dd' : ((input_typeOfInput =='dateTime')?'yy-mm-dd':'hh:mm')"                [disabled]="IsDisabled || IsMovable || readonly"                [monthNavigator]="true"                [name]="input_name"                [placeholder]="(inputPlaceHolder != null) ? (('general.Enter ' | translate) + ( (inputPlaceHolder && inputPlaceHolder != '')? (inputPlaceHolder| translate)  : label_name) ):''"                [required]="(required ==true) ? true : null"                [showButtonBar]="true"                [showSeconds]="showSeconds"                [showTime]="input_typeOfInput == 'time' || input_typeOfInput == 'dateTime'"                [style.color]="IsDisabled ||readonly ? fontcolor :''"                [style.cursor]="(IsMovable) ? 'move' : ''"                [style.height]="height"                [timeOnly]="input_typeOfInput == 'time'"                [yearNavigator]="true"                [minDate]="minDate"                [maxDate]="maxDate"                hourFormat="24"                yearRange="1950:2050"                [inputId]="(label_name) ? label_name.toLowerCase().replace(' ' , ''): ''"                [id]="label_name"    ></p-calendar>    <textarea #txtarea (change)="EmitChange(txtarea,null)"              (keyup)="EmitOnKeyUp(txtarea.value)"  [scrollTop]="txtarea.scrollHeight"              *ngIf="IsTextArea"              [class]="'form-control col-sm-'+size"              [disabled]="IsDisabled"              [id]="input_id"              [name]="input_name"              [ngModel]="getValue()"              [placeholder]="(inputPlaceHolder != null) ? (('general.Enter ' | translate) + (inputPlaceHolder  || label_name)  | translate):''"              [readonly]="IsMovable || readonly"              [required]="required"              [style.color]="IsDisabled ||readonly ? fontcolor :''"              [style.cursor]="(IsMovable) ? 'move' : ''"              [style.height]="height"              class="form-control"></textarea>    <p-inputNumber #ctrl                   (onBlur)="EmitChange(ctrl,null)"                   (keypress)="keypress.emit($event)"                   (keyup)="EmitOnKeyUp(ctrl.value)"                   *ngIf=" input_typeOfInput =='currency' "                   [class]="'form-control col-sm-'+size"                   [id]="input_id"                   [inputId]="(input_id) ? input_id.toLowerCase().replace(' ' , ''): ''"                   [name]="input_name"                   [ngModel]="getValue()"                   [pattern]="regex"                   [placeholder]="(inputPlaceHolder != null) ? (('general.Enter ' | translate) + (inputPlaceHolder  || label_name)  | translate):''"                   [ariaRequired]="required"                   [required]="required"                   [style.color]="IsDisabled ||readonly ? fontcolor :''"                   [style.cursor]="(IsMovable) ? 'move' : ''"                   [style.height]="height"                   [style.border-radius]="'5px'"                   [currency]="currencyType"                   [mode]="modType"                   [step]="(AlowFraction)? 'any' :1"                   [disabled]="IsMovable || readonly || IsDisabled"                   autocomplete="off"                   pInputText    ></p-inputNumber>    <p-password #ctrl *ngIf="input_typeOfInput === 'password'"                (change)="EmitChange(ctrl,null)"                (keypress)="keypress.emit($event)"                (keyup)="EmitOnKeyUp(ctrl.value)"                (onBlur)="EmitChange(ctrl,null)"                [class]="IsRTL ? 'RTL-Password form-control col-sm-'+size:'form-control col-sm-'+size"                [id]="input_id"                [name]="input_name"                [inputId]="input_id"                [placeholder]="(inputPlaceHolder != null) ? (('general.Enter ' | translate) + (inputPlaceHolder  || label_name)  | translate):''"                [required]="required"                [readonly]="IsMovable || readonly || IsDisabled"                [style.color]="IsDisabled ||readonly ? fontcolor :''"                [style.cursor]="(IsMovable) ? 'move' : ''"                [style.height]="height"                [style.border-radius]="'5px'"                [ngModel]="getValue()"                [disabled]="IsMovable || readonly || IsDisabled"                [ngModelOptions]="{standalone: true}"                [feedback]="passwordFeedback"                [toggleMask]="passwordToggleMask"                [strongRegex]="passwordStrongRegex"                [appendTo]="appendTo">        <ng-template pTemplate="footer" *ngIf="passwordHints">            <p-divider></p-divider>            <p class="p-mt-2">Suggestions</p>            <ul class="p-pl-2 p-ml-2 p-mt-0">                <li *ngFor="let passwordHint of passwordHints"> {{passwordHint}}</li>            </ul>        </ng-template>    </p-password>            </span>        <span style="padding: 0 10px; width:15%">    <label *ngIf="input_typeOfInput != 'checkbox' && !hideLabelName" [for]="input_id"           [style.color]="labelColor?labelColor:_baConfig.getSelectedThemeDefaultFontColor()"           [style.font-weight]="(isBold)?'bold':''"           [style.max-height]="height"           [style.text-overflow-ellipsis]="true"           [pTooltip]="udaTooltip|translate" tooltipPosition="top"    >{{label_name |translate:0 }}</label></span>        </div></span><div *ngIf="input_typeOfInput == 'color' ">    <div *ngIf="!hideLabelName" [ngStyle]="IsRTL ? {'text-align': 'justify'} : { }">        <label [style.margin-top]="'7px'"               [style.color]="labelColor?labelColor:_baConfig.getSelectedThemeDefaultFontColor()"        >{{label_name | translate:0}}</label>        <br>    </div>    <p-colorPicker            (onChange)="EmitColorChange($event)"            [ngModel]="getValue()"            [inputId]="input_id"            #foreColor            appendTo="body"            [disabled]="IsDisabled"            [ngStyle]="IsRTL ? {'float': 'right'} : { }"    >    </p-colorPicker>    <br>    <input *ngIf="showHex" class="colorPickerHex form-control" type="text" (change)="onColorChanged(foreColor)"           [(ngModel)]="foreColor.inputBgColor"/></div>select recid,company_name,created_by,created_by_id,created_date,last_modified_by,last_modified_by_id,last_modified_date,customer_email,customer_name,expiry_date,license_key,license_type,number_of_admins,number_of_apps,number_of_concurrent_users,number_of_modules,number_of_processes,number_of_types,number_of_users,schema_name1000	"NTG"		-1	"2022-12-12 14:13:26"				"alaa.hassan.00.22@gmail.com"	"Alaa Hassan"	"2023-10-12 14:13:26"	"f2e421cbce6dd5bdf9670e625e1e6dfe6aeb1c5588b0bee1d8448e9d54b4af00"		100	10000	100	10000	10000	10000	1000        sql.append("'TR','HRTR','HR0','HRKSA','SME','HME','HSR','CRM','TSK','EXP','PAY','NTS','INV','PER','AST','ONB','REC','ATT','LEV','MIS','PEM','BHR','FIN','CRT','HMS','PSP','CMT','PMS','MAIN','VFCOLL','KH','SME_TR','KSA','ITSM','HREGY','TST','NTG','TNT'");